        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:#include <time.h>
        -:   10:
        -:   11:#define TOTAL_TESTS 5000
        -:   12:
function main called 1 returned 100% blocks executed 100%
        -:   13:int main() {
        -:   14:
        1:   15:  srand(time(NULL));
        1:   16:  int passes = 0, fails = 0;
        1:   17:  int i, result = 0, numPlayers = 0, currentPlayer = 0;
        1:   18:  int handCount = 0, deckCount = 0, playerCoins = 0;
        1:   19:  int seed = 100;
        1:   20:  int handPos = 0;
        1:   21:  int bonus = 0;
        -:   22:  //int choice1, choice2, choice3 = 0;
        1:   23:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, great_hall, smithy, council_room};
        1:   24:  struct gameState gs = {};
    10002:   25:  for (i = 0; i < TOTAL_TESTS; i++) {
branch  0 taken 99%
branch  1 taken 1%
        -:   26:
        -:   27:    // need btwn 2 - 4 players to play
     5000:   28:    numPlayers = rand() % 3 + 2;
        -:   29:
     5000:   30:    initializeGame(numPlayers, k, seed, &gs);
        -:   31:
        -:   32:    //Initiate valid state variables
     5000:   33:    gs.deckCount[currentPlayer] = rand() % MAX_DECK; //Pick random deck size out of MAX DECK size
     5000:   34:    gs.discardCount[currentPlayer] = rand() % MAX_DECK;
     5000:   35:    gs.handCount[currentPlayer] = rand() % MAX_HAND;
        -:   36:
     5000:   37:    handCount = gs.handCount[currentPlayer];
     5000:   38:    deckCount = gs.deckCount[currentPlayer];
        -:   39:
     5000:   40:    playerCoins = gs.coins;
        -:   41:
     5000:   42:    int card = 0, coins = 0;
     5000:   43:    card = handCount;
     5000:   44:    int actionsBefore = 0, actionsAfter = 0;
     5000:   45:    actionsBefore = gs.numActions;
     5000:   46:    coins = playerCoins;
        -:   47:
     5000:   48:		gs.hand[currentPlayer][0] = great_hall;
        -:   49:
     5000:   50:    int returnValue = cardEffect(great_hall, 0, 0, 0, &gs, handPos, &bonus);		//Run Adventurer card
        -:   51:
     5000:   52:    handCount = gs.handCount[currentPlayer];
        -:   53:
     5000:   54:    actionsAfter = gs.numActions;
     5000:   55:    if (handCount == card) {
branch  0 taken 100%
branch  1 taken 0%
     5000:   56:      passes++;
     5000:   57:    }
        -:   58:
     5000:   59:    if (actionsAfter - actionsBefore == 1) {
branch  0 taken 100%
branch  1 taken 0%
        -:   60:      // printf("actions inc by one\n");
        -:   61:      // printf("TEST PASSED\n");
     5000:   62:      passes++;
     5000:   63:    }
        -:   64:
        -:   65:
        -:   66:    //memset(&gs, '\0', sizeof(gs));
     5000:   67:  }
        1:   68:  printf("total passes: %d\n", passes);
        1:   69:  printf("total fails: %d\n", fails);
        1:   70:  return 0;
        -:   71:}
