        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:#include <time.h>
        -:   10:
        -:   11:#define TOTAL_TESTS 5000
        -:   12:
        -:   13:// void assertTrue(int statement) {
        -:   14://     if (statement == 1) {
        -:   15://         printf("Test passed\n");
        -:   16://     } else {
        -:   17://         printf("Test failed\n");
        -:   18://     }
        -:   19:// }
        -:   20:
function main called 1 returned 100% blocks executed 91%
        -:   21:int main() {
        -:   22:
        1:   23:  srand(time(NULL));
        1:   24:  int passes = 0, fails = 0;
        1:   25:  int i, result = 0, numPlayers = 0, currentPlayer = 0;
        1:   26:  int handCount = 0, deckCount = 0, playerCoins = 0;
        1:   27:  int seed = 100;
        1:   28:  int handPos = 0;
        1:   29:  int bonus = 0;
        -:   30:  //int choice1, choice2, choice3 = 0;
        1:   31:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   32:  struct gameState gs;
    10002:   33:  for (i = 0; i < TOTAL_TESTS; i++) {
branch  0 taken 99%
branch  1 taken 1%
        -:   34:
        -:   35:    // need btwn 2 - 4 players to play
     5000:   36:    numPlayers = rand() % 3 + 2;
        -:   37:
     5000:   38:    initializeGame(numPlayers, k, seed, &gs);
        -:   39:
        -:   40:    //Initiate valid state variables
     5000:   41:    gs.deckCount[currentPlayer] = rand() % MAX_DECK; //Pick random deck size out of MAX DECK size
     5000:   42:    gs.discardCount[currentPlayer] = rand() % MAX_DECK;
     5000:   43:    gs.handCount[currentPlayer] = rand() % MAX_HAND;
        -:   44:
        -:   45:    //Copy state variables
     5000:   46:    handCount = gs.handCount[currentPlayer];
     5000:   47:    deckCount = gs.deckCount[currentPlayer];
        -:   48:
     5000:   49:    playerCoins = gs.coins;
        -:   50:
     5000:   51:    int card = 0, coins = 0;
     5000:   52:    card = handCount;
     5000:   53:    coins = playerCoins;
        -:   54:
     5000:   55:		gs.hand[currentPlayer][0] = adventurer;
        -:   56:
        -:   57:    int returnValue;
     5000:   58:    returnValue = cardEffect(adventurer, 0, 0, 0, &gs, handPos, &bonus);		//Run Adventurer card
        -:   59:
     5000:   60:    handCount = gs.handCount[currentPlayer];
        -:   61:
        -:   62:
        -:   63:    // never going to pass bc of the bug i introduced
     5000:   64:    if (handCount > card) {
branch  0 taken 99%
branch  1 taken 1%
        -:   65:      //printf("cards increased incorrectly\n");
        -:   66:      //printf("fail\n");
     4977:   67:      fails++;
     4977:   68:    } else {
        -:   69:      //printf("pass\n");
       23:   70:      passes++;
        -:   71:    }
        -:   72:
     5000:   73:    discardCard(handPos, 1, &gs, 0);
        -:   74:
     5000:   75:    returnValue = cardEffect(adventurer, 0, 0, 0, &gs, handPos, &bonus);		//Run Adventurer card
        -:   76:
     5000:   77:    if (returnValue != 0) {
branch  0 taken 0%
branch  1 taken 100%
        -:   78:      //printf("return value of adventurer is bad\n");
        -:   79:      //printf("fail\n");
    #####:   80:      fails++;
    #####:   81:    } else {
        -:   82:      //printf("pass\n");
     5000:   83:      passes++;
        -:   84:    }
        -:   85:    //memset(&gs, '\0', sizeof(gs));
     5000:   86:  }
        1:   87:  printf("total passes: %d\n", passes);
        1:   88:  printf("total fails: %d\n", fails);
        1:   89:  return 0;
        -:   90:}
