        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:
function assertTrue called 3 returned 100% blocks executed 80%
        -:   10:void assertTrue(int statement) {
        3:   11:    if (statement == 1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:        printf("Test passed\n");
    #####:   13:    } else {
        3:   14:        printf("Test failed\n");
        -:   15:    }
        3:   16:}
        -:   17:
        -:   18:
function main called 1 returned 100% blocks executed 100%
        -:   19:int main() {
        -:   20:
        1:   21:  printf("~~testing village card~~\n");
        1:   22:  int testsPassed, testsFailed = 0;
        -:   23:  struct gameState gs;
        1:   24:  int numPlayers = 2;
        1:   25:  int seed = 100;
        1:   26:  int handPos = 0;
        1:   27:  int bonus = 0;
        1:   28:  int choice1, choice2, choice3 = 0;
        1:   29:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   30:
        1:   31:  initializeGame(numPlayers, k, seed, &gs);
        -:   32:
        -:   33:  // what does village do?
        -:   34:  // +1 card to player
        -:   35:  // +2 Actions
        -:   36:  // -1 card from player
        -:   37:
        1:   38:  int handCountBeforeCard = numHandCards(&gs);
        1:   39:  int deckCountBeforeCard = gs.deckCount[0];
        1:   40:  int actionsBefore = gs.numActions;
        1:   41:  int result = cardEffect(village, choice1, choice2, choice3, &gs, handPos, &bonus);
        1:   42:  int handCountAfterCard = numHandCards(&gs);
        1:   43:  int actionsAfter = gs.numActions;
        1:   44:  int deckCountAfterCard = gs.deckCount[0];
        -:   45:
        1:   46:  printf("Testing that there is a net gain of 0 cards\n");
        1:   47:  assertTrue(handCountBeforeCard == handCountAfterCard);
        1:   48:  printf("Testing that actions have increased by 2\n");
        1:   49:  assertTrue(actionsAfter - actionsBefore == 2);
        -:   50:  // village card gets played, card also discared, so -1 +1 -1 = -1 to deck
        1:   51:  printf("Testing that the deck card difference after village is played is 1\n");
        1:   52:  assertTrue(deckCountAfterCard - deckCountBeforeCard == 1);
        -:   53:
        1:   54:  printf("all tests passed\n");
        1:   55:  return 0;
        -:   56:}
