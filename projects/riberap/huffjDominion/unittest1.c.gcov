        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:testing isGameOver
        -:    3:game ends when:
        -:    4:> 0 provinces
        -:    5:
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:#include <math.h>
        -:   16:
function main called 1 returned 100% blocks executed 66%
        -:   17:int main() {
        1:   18:    printf("~~testing function isGameOver~~");
        -:   19:    int i, n, p, r, randomCardCount;
        -:   20:
        -:   21:     struct gameState G;
        -:   22:
        1:   23:     SelectStream(2);
        1:   24:     PutSeed(3);
        -:   25:
        -:   26:     // initialize hand
        -:   27:     // taken from betterTestDrawCard.c
    20002:   28:     for (n = 0; n < 10000; n++) {
branch  0 taken 99%
branch  1 taken 1%
526020000:   29:       for (i = 0; i < sizeof(struct gameState); i++) {
branch  0 taken 99%
branch  1 taken 1%
263000000:   30:         ((char*)&G)[i] = floor(Random() * 256);
263000000:   31:       }
        -:   32:       // create a random but sane game state
    10000:   33:       randomCardCount = floor(Random() * MAX_HAND);
    10000:   34:       p = floor(Random() * 2);
    10000:   35:       G.deckCount[p] = floor(Random() * MAX_DECK);
    10000:   36:       G.discardCount[p] = floor(Random() * MAX_DECK);
    10000:   37:       G.handCount[p] = randomCardCount;
        -:   38:
        -:   39:
        -:   40:       // test if game ends with 0 provices
    10000:   41:       G.supplyCount[province] = 0;
    10000:   42:       r = isGameOver(&G);
    20000:   43:       assert(r == 1);
branch  0 taken 0%
branch  1 taken 100%
        -:   44:
        -:   45:       // test if game ends with > 0 provinces
    10000:   46:       G.supplyCount[province] = 1;
    10000:   47:       r = isGameOver(&G);
    20000:   48:       assert (r == 0);
branch  0 taken 0%
branch  1 taken 100%
        -:   49:
        -:   50:       // test if game ends with 1 empty pile
    10000:   51:       G.supplyCount[feast] = 0;
    10000:   52:       r =  isGameOver(&G);
    20000:   53:       assert(r == 0);
branch  0 taken 0%
branch  1 taken 100%
        -:   54:
        -:   55:       // test if game ends with 2 empty pile
    10000:   56:       G.supplyCount[smithy] = 0;
    10000:   57:       r = isGameOver(&G);
    20000:   58:       assert(r == 0);
branch  0 taken 0%
branch  1 taken 100%
        -:   59:
        -:   60:       // test if game ends with 3 empty pile
    10000:   61:       G.supplyCount[adventurer] = 0;
    10000:   62:       r = isGameOver(&G);
    20000:   63:       assert(r == 1);
branch  0 taken 0%
branch  1 taken 100%
    10000:   64:   }
        -:   65:
        1:   66:     printf("All tests passed!\n");
        -:   67:
        1:   68:    return 0;
        -:   69:  }
