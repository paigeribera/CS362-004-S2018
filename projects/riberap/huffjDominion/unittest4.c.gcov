        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:
function main called 1 returned 100% blocks executed 80%
        -:   10:int main() {
        1:   11:    printf("~~testing function supplyCount~~\n");
        1:   12:    int testsPassed, testsFailed = 0;
        -:   13:    int i, n, p, r, randomCardCount;
        -:   14:
        -:   15:     struct gameState G;
        -:   16:
        1:   17:     SelectStream(2);
        1:   18:     PutSeed(3);
        -:   19:
        1:   20:       randomCardCount = floor(Random() * MAX_HAND);
        -:   21:       //p = floor(Random() * 2);
        1:   22:       G.deckCount[1] = floor(Random() * MAX_DECK);
        1:   23:       G.discardCount[1] = floor(Random() * MAX_DECK);
        1:   24:       G.handCount[1] = randomCardCount;
        -:   25:
        1:   26:       srand(time(NULL));
        -:   27:       int randomNumForCard;
        -:   28:       int randomNumOfCards;
        -:   29:       int sc;
        -:   30:
        1:   31:       printf("Testing cases....");
    20002:   32:       for (i = 0; i < 10000; i++) {
branch  0 taken 99%
branch  1 taken 1%
    10000:   33:         randomNumForCard = rand() % 27;
    10000:   34:         randomNumOfCards = rand() % 101;
    10000:   35:         G.supplyCount[randomNumForCard] = randomNumOfCards;
    10000:   36:         sc = supplyCount(randomNumForCard, &G);
    20000:   37:         assert(randomNumOfCards == sc);
branch  0 taken 0%
branch  1 taken 100%
    10000:   38:       }
        -:   39:
        1:   40:     printf("All 10000 tests passed");
        1:   41:       return 0;
        -:   42:}
