~~testing function isGameOver~~All tests passed!
~~testing function whoseTurn~~Testing Edge Cases for Number of Players
Testing 0 Players
Return value of initializeGame...-1gameCreated == -1 passed
gameCreated with 1 player not possible - test passed
gameCreated with 1 player possible - test passed
Player 1's turn...test passed
Player 0's turn...test passed
~~testing function getCost~~
Checking for a card at a negative index
Expected return value: -1
Actual return value: -1
Test passed...
Checking for a card at a higher index than exists
Expected return value: -1
Actual return value: -1
Test passed...
Checking for a card at first index that exists
Expected return value: 0
Actual return value: 0
Test passed...
Checking for a card at first index that exists
Expected return value: 0
Actual return value: 4
Test passed...
Random card selected corresponding to enum CARD...26
Testing the randomly selected card against its expected cost
Expected cost returned: 4
Actual cost returned: 4
Test passed...
Random card selected corresponding to enum CARD...12
Testing the randomly selected card against its expected cost
Expected cost returned: 4
Actual cost returned: 4
Test passed...
Random card selected corresponding to enum CARD...23
Testing the randomly selected card against its expected cost
Expected cost returned: 5
Actual cost returned: 5
Test passed...
Random card selected corresponding to enum CARD...8
Testing the randomly selected card against its expected cost
Expected cost returned: 5
Actual cost returned: 5
Test passed...
Random card selected corresponding to enum CARD...25
Testing the randomly selected card against its expected cost
Expected cost returned: 4
Actual cost returned: 4
Test passed...
Random card selected corresponding to enum CARD...19
Testing the randomly selected card against its expected cost
Expected cost returned: 5
Actual cost returned: 5
Test passed...
Random card selected corresponding to enum CARD...9
Testing the randomly selected card against its expected cost
Expected cost returned: 4
Actual cost returned: 4
Test passed...
Random card selected corresponding to enum CARD...13
Testing the randomly selected card against its expected cost
Expected cost returned: 4
Actual cost returned: 4
Test passed...
Random card selected corresponding to enum CARD...7
Testing the randomly selected card against its expected cost
Expected cost returned: 6
Actual cost returned: 6
Test passed...
Random card selected corresponding to enum CARD...7
Testing the randomly selected card against its expected cost
Expected cost returned: 6
Actual cost returned: 6
Test passed...
~~testing function supplyCount~~
Testing cases....All 10000 tests passed~~testing adventurer card~~
Testing that +2 cards get added to hand...
Test passed
~~testing smithy card~~
testing that hand has +2 cards
Test failed
testing that deck has +4 cards
Test failed
~~testing village card~~
Testing that there is a net gain of 0 cards
Test failed
Testing that actions have increased by 2
Test failed
Testing that the deck card difference after village is played is 1
Test failed
all tests passed
~~testing greatHall card~~
Testing that there is a net gain of 0 cards
Test passed
Testing that actions have increased by 1
Test passed
Testing that the deck card difference after great_hall is played is -1
Test passed
all tests passed
File 'unittest1.c'
Lines executed:100.00% of 30
Branches executed:100.00% of 14
Taken at least once:64.29% of 14
No calls
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:testing isGameOver
        -:    3:game ends when:
        -:    4:> 0 provinces
        -:    5:
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:#include <math.h>
        -:   16:
function main called 1 returned 100% blocks executed 66%
        -:   17:int main() {
        1:   18:    printf("~~testing function isGameOver~~");
        -:   19:    int i, n, p, r, randomCardCount;
        -:   20:
        -:   21:     struct gameState G;
        -:   22:
        1:   23:     SelectStream(2);
        1:   24:     PutSeed(3);
        -:   25:
        -:   26:     // initialize hand
        -:   27:     // taken from betterTestDrawCard.c
    20002:   28:     for (n = 0; n < 10000; n++) {
branch  0 taken 99%
branch  1 taken 1%
526020000:   29:       for (i = 0; i < sizeof(struct gameState); i++) {
branch  0 taken 99%
branch  1 taken 1%
263000000:   30:         ((char*)&G)[i] = floor(Random() * 256);
263000000:   31:       }
        -:   32:       // create a random but sane game state
    10000:   33:       randomCardCount = floor(Random() * MAX_HAND);
    10000:   34:       p = floor(Random() * 2);
    10000:   35:       G.deckCount[p] = floor(Random() * MAX_DECK);
    10000:   36:       G.discardCount[p] = floor(Random() * MAX_DECK);
    10000:   37:       G.handCount[p] = randomCardCount;
        -:   38:
        -:   39:
        -:   40:       // test if game ends with 0 provices
    10000:   41:       G.supplyCount[province] = 0;
    10000:   42:       r = isGameOver(&G);
    20000:   43:       assert(r == 1);
branch  0 taken 0%
branch  1 taken 100%
        -:   44:
        -:   45:       // test if game ends with > 0 provinces
    10000:   46:       G.supplyCount[province] = 1;
    10000:   47:       r = isGameOver(&G);
    20000:   48:       assert (r == 0);
branch  0 taken 0%
branch  1 taken 100%
        -:   49:
        -:   50:       // test if game ends with 1 empty pile
    10000:   51:       G.supplyCount[feast] = 0;
    10000:   52:       r =  isGameOver(&G);
    20000:   53:       assert(r == 0);
branch  0 taken 0%
branch  1 taken 100%
        -:   54:
        -:   55:       // test if game ends with 2 empty pile
    10000:   56:       G.supplyCount[smithy] = 0;
    10000:   57:       r = isGameOver(&G);
    20000:   58:       assert(r == 0);
branch  0 taken 0%
branch  1 taken 100%
        -:   59:
        -:   60:       // test if game ends with 3 empty pile
    10000:   61:       G.supplyCount[adventurer] = 0;
    10000:   62:       r = isGameOver(&G);
    20000:   63:       assert(r == 1);
branch  0 taken 0%
branch  1 taken 100%
    10000:   64:   }
        -:   65:
        1:   66:     printf("All tests passed!\n");
        -:   67:
        1:   68:    return 0;
        -:   69:  }
File 'unittest2.c'
Lines executed:100.00% of 28
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
No calls
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
function main called 1 returned 100% blocks executed 54%
        -:    9:int main() {
        1:   10:    printf("~~testing function whoseTurn~~");
        1:   11:    int testsPassed, testsFailed = 0;
        -:   12:    struct gameState gs1, gs2, gs3, gs4, gs5, testState;
        -:   13:    int numPlayers;
        1:   14:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        1:   15:    int seed = 100;
        -:   16:
        -:   17:    //initializeGame(numPlayers, k, seed, &gs);
        -:   18:
        -:   19:    //printf("%d\n", whoseTurn(&gs));
        -:   20:
        -:   21:    // always return an integer
        -:   22:    // range btwn 2 - 4
        -:   23:    // test for 1 player. test for 5 players
        -:   24:    // test 1, 4, 0, 5
        -:   25:
        1:   26:    printf("Testing Edge Cases for Number of Players\n");
        1:   27:    printf("Testing 0 Players\n");
        1:   28:    numPlayers = 0;
        1:   29:    int gameCreated = initializeGame(numPlayers, k, seed, &gs1);
        1:   30:    printf("Return value of initializeGame...%d", gameCreated);
        2:   31:    assert(gameCreated == -1);
branch  0 taken 0%
branch  1 taken 100%
        1:   32:    printf("gameCreated == -1 passed\n");
        1:   33:    numPlayers = 1;
        1:   34:    int gameCreated2 = initializeGame(numPlayers, k, seed, &gs2);
        2:   35:    assert(gameCreated2 == -1);
branch  0 taken 0%
branch  1 taken 100%
        1:   36:    printf("gameCreated with 1 player not possible - test passed\n");
        1:   37:    numPlayers = 2;
        1:   38:    int gameCreated3 = initializeGame(numPlayers, k, seed, &gs3);
        2:   39:    assert(gameCreated3 == 0);
branch  0 taken 0%
branch  1 taken 100%
        1:   40:    printf("gameCreated with 1 player possible - test passed\n");
        1:   41:    gs3.whoseTurn = 1;
        -:   42:    int pTurn;
        1:   43:    pTurn = whoseTurn(&gs3);
        2:   44:    assert(pTurn == 1);
branch  0 taken 0%
branch  1 taken 100%
        1:   45:    printf("Player 1's turn...test passed\n");
        1:   46:    gs3.whoseTurn = 0;
        1:   47:    pTurn = whoseTurn(&gs3);
        2:   48:    assert(pTurn == 0);
branch  0 taken 0%
branch  1 taken 100%
        1:   49:    printf("Player 0's turn...test passed\n");
        -:   50:
        -:   51:
        -:   52:
        1:   53:    return 0;
        -:   54:}
File 'unittest3.c'
Lines executed:100.00% of 39
Branches executed:100.00% of 12
Taken at least once:58.33% of 12
No calls
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define MAX_CARD_NUMBER 27
        -:   10:
function main called 1 returned 100% blocks executed 61%
        -:   11:int main() {
        1:   12:    printf("~~testing function getCost~~\n");
        1:   13:    int testsPassed, testsFailed = 0;
        -:   14:    // generate random card numbers to be in deck
        -:   15:    // pass it a card number that doesn't exist
        -:   16:
        -:   17:    int cardCost;
        1:   18:    int cardCosts[27] = {0, 2, 5, 8, 0, 3, 6, 6, 5, 4, 4, 5, 4, 4, 3, 4, 3, 5, 3, 5, 3, 4, 2, 5, 4, 4, 4};
        -:   19:
        -:   20:    // test a negative number
        -:   21:    // can't have negative index in enum
        1:   22:    printf("Checking for a card at a negative index\n");
        1:   23:    printf("Expected return value: -1\n");
        1:   24:    cardCost = getCost(-5);
        -:   25:
        2:   26:    assert(cardCost == -1);
branch  0 taken 0%
branch  1 taken 100%
        1:   27:    printf("Actual return value: %d\n", cardCost);
        1:   28:    printf("Test passed...\n");
        -:   29:
        -:   30:
        -:   31:    // checking for number higher than max enum index
        1:   32:    printf("Checking for a card at a higher index than exists\n");
        1:   33:    printf("Expected return value: -1\n");
        1:   34:    cardCost = getCost(30);
        2:   35:    assert(cardCost == -1);
branch  0 taken 0%
branch  1 taken 100%
        1:   36:    printf("Actual return value: %d\n", cardCost);
        1:   37:    printf("Test passed...\n");
        -:   38:
        1:   39:    printf("Checking for a card at first index that exists\n");
        1:   40:    printf("Expected return value: 0\n");
        1:   41:    cardCost = getCost(0);
        2:   42:    assert(cardCost == 0);
branch  0 taken 0%
branch  1 taken 100%
        1:   43:    printf("Actual return value: %d\n", cardCost);
        1:   44:    printf("Test passed...\n");
        -:   45:
        1:   46:    printf("Checking for a card at first index that exists\n");
        1:   47:    printf("Expected return value: 0\n");
        1:   48:    cardCost = getCost(26);
        2:   49:    assert(cardCost == cardCosts[26]);
branch  0 taken 0%
branch  1 taken 100%
        1:   50:    printf("Actual return value: %d\n", cardCost);
        1:   51:    printf("Test passed...\n");
        -:   52:
        1:   53:    srand(time(NULL));
        -:   54:    int randomNum;
        -:   55:    int i;
       22:   56:    for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9%
       10:   57:      randomNum = rand() % 28;
       10:   58:      printf("Random card selected corresponding to enum CARD...%d\n", randomNum);
       10:   59:      printf("Testing the randomly selected card against its expected cost\n");
       10:   60:      printf("Expected cost returned: %d\n", cardCosts[randomNum]);
       10:   61:      cardCost = getCost(randomNum);
       20:   62:      assert(cardCost == cardCosts[randomNum]);
branch  0 taken 0%
branch  1 taken 100%
       10:   63:      printf("Actual cost returned: %d\n", cardCost);
       10:   64:      printf("Test passed...\n");
       10:   65:    }
        -:   66:
        1:   67:    return 0;
        -:   68:}
File 'unittest4.c'
Lines executed:100.00% of 19
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:
function main called 1 returned 100% blocks executed 80%
        -:   10:int main() {
        1:   11:    printf("~~testing function supplyCount~~\n");
        1:   12:    int testsPassed, testsFailed = 0;
        -:   13:    int i, n, p, r, randomCardCount;
        -:   14:
        -:   15:     struct gameState G;
        -:   16:
        1:   17:     SelectStream(2);
        1:   18:     PutSeed(3);
        -:   19:
        1:   20:       randomCardCount = floor(Random() * MAX_HAND);
        -:   21:       //p = floor(Random() * 2);
        1:   22:       G.deckCount[1] = floor(Random() * MAX_DECK);
        1:   23:       G.discardCount[1] = floor(Random() * MAX_DECK);
        1:   24:       G.handCount[1] = randomCardCount;
        -:   25:
        1:   26:       srand(time(NULL));
        -:   27:       int randomNumForCard;
        -:   28:       int randomNumOfCards;
        -:   29:       int sc;
        -:   30:
        1:   31:       printf("Testing cases....");
    20002:   32:       for (i = 0; i < 10000; i++) {
branch  0 taken 99%
branch  1 taken 1%
    10000:   33:         randomNumForCard = rand() % 27;
    10000:   34:         randomNumOfCards = rand() % 101;
    10000:   35:         G.supplyCount[randomNumForCard] = randomNumOfCards;
    10000:   36:         sc = supplyCount(randomNumForCard, &G);
    20000:   37:         assert(randomNumOfCards == sc);
branch  0 taken 0%
branch  1 taken 100%
    10000:   38:       }
        -:   39:
        1:   40:     printf("All 10000 tests passed");
        1:   41:       return 0;
        -:   42:}
File 'cardtest1.c'
Lines executed:95.00% of 20
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:
function assertTrue called 1 returned 100% blocks executed 80%
        -:   10:void assertTrue(int statement) {
        1:   11:    if (statement == 1) {
branch  0 taken 100%
branch  1 taken 0%
        1:   12:        printf("Test passed\n");
        1:   13:    } else {
    #####:   14:        printf("Test failed\n");
        -:   15:    }
        1:   16:}
        -:   17:
function main called 1 returned 100% blocks executed 100%
        -:   18:int main() {
        1:   19:    printf("~~testing adventurer card~~\n");
        1:   20:    int testsPassed, testsFailed = 0;
        -:   21:    struct gameState gs;
        1:   22:    int numPlayers = 2;
        1:   23:    int seed = 100;
        1:   24:    int handPos = 0;
        1:   25:    int bonus = 0;
        1:   26:    int choice1, choice2, choice3 = 0;
        1:   27:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   28:
        1:   29:    initializeGame(numPlayers, k, seed, &gs);
        -:   30:
        1:   31:    int handCountBeforeCard = numHandCards(&gs);
        1:   32:    int result = cardEffect(adventurer, choice1, choice2, choice3, &gs, handPos, &bonus);
        1:   33:    int handCountAfterCard = numHandCards(&gs);
        1:   34:    printf("Testing that +2 cards get added to hand...\n");
        -:   35:    // this will fail because of the bug i introduced in assignment2
        1:   36:    assertTrue(handCountAfterCard - handCountBeforeCard == 2);
        -:   37:
        -:   38:
        -:   39:
        1:   40:    return 0;
        -:   41:
        -:   42:}
File 'cardtest2.c'
Lines executed:91.67% of 24
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:
function assertTrue called 2 returned 100% blocks executed 80%
        -:   10:void assertTrue(int statement) {
        2:   11:    if (statement == 1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:        printf("Test passed\n");
    #####:   13:    } else {
        2:   14:        printf("Test failed\n");
        -:   15:    }
        2:   16:}
        -:   17:
function main called 1 returned 100% blocks executed 100%
        -:   18:int main() {
        1:   19:  printf("~~testing smithy card~~\n");
        1:   20:  int testsPassed, testsFailed = 0;
        -:   21:  struct gameState gs;
        1:   22:  int numPlayers = 2;
        1:   23:  int seed = 100;
        1:   24:  int handPos = 0;
        1:   25:  int bonus = 0;
        1:   26:  int choice1, choice2, choice3 = 0;
        1:   27:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   28:
        1:   29:  initializeGame(numPlayers, k, seed, &gs);
        -:   30:
        1:   31:  int handCountBeforeCard = numHandCards(&gs);
        1:   32:  int deckCountBeforeCard = gs.deckCount[0];
        1:   33:  int result = cardEffect(smithy, choice1, choice2, choice3, &gs, handPos, &bonus);
        1:   34:  int handCountAfterCard = numHandCards(&gs);
        1:   35:  int deckCountAfterCard = gs.deckCount[0];
        -:   36:
        -:   37:  // expected behavior: 3 cards drawn from deck...
        -:   38:  // but then player played 1 card. so +2 CARDS
        -:   39:  // for player and deck +4 cards
        1:   40:  printf("testing that hand has +2 cards\n");
        1:   41:  assertTrue(handCountAfterCard - handCountBeforeCard == 2);
        1:   42:  printf("testing that deck has +4 cards\n");
        1:   43:  assertTrue(deckCountAfterCard - deckCountBeforeCard == 4);
        -:   44:  // above doesn't account for the discarded card
        -:   45:
        -:   46:
        1:   47:  return 0;
        -:   48:}
File 'cardtest3.c'
Lines executed:93.10% of 29
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:
function assertTrue called 3 returned 100% blocks executed 80%
        -:   10:void assertTrue(int statement) {
        3:   11:    if (statement == 1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   12:        printf("Test passed\n");
    #####:   13:    } else {
        3:   14:        printf("Test failed\n");
        -:   15:    }
        3:   16:}
        -:   17:
        -:   18:
function main called 1 returned 100% blocks executed 100%
        -:   19:int main() {
        -:   20:
        1:   21:  printf("~~testing village card~~\n");
        1:   22:  int testsPassed, testsFailed = 0;
        -:   23:  struct gameState gs;
        1:   24:  int numPlayers = 2;
        1:   25:  int seed = 100;
        1:   26:  int handPos = 0;
        1:   27:  int bonus = 0;
        1:   28:  int choice1, choice2, choice3 = 0;
        1:   29:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   30:
        1:   31:  initializeGame(numPlayers, k, seed, &gs);
        -:   32:
        -:   33:  // what does village do?
        -:   34:  // +1 card to player
        -:   35:  // +2 Actions
        -:   36:  // -1 card from player
        -:   37:
        1:   38:  int handCountBeforeCard = numHandCards(&gs);
        1:   39:  int deckCountBeforeCard = gs.deckCount[0];
        1:   40:  int actionsBefore = gs.numActions;
        1:   41:  int result = cardEffect(village, choice1, choice2, choice3, &gs, handPos, &bonus);
        1:   42:  int handCountAfterCard = numHandCards(&gs);
        1:   43:  int actionsAfter = gs.numActions;
        1:   44:  int deckCountAfterCard = gs.deckCount[0];
        -:   45:
        1:   46:  printf("Testing that there is a net gain of 0 cards\n");
        1:   47:  assertTrue(handCountBeforeCard == handCountAfterCard);
        1:   48:  printf("Testing that actions have increased by 2\n");
        1:   49:  assertTrue(actionsAfter - actionsBefore == 2);
        -:   50:  // village card gets played, card also discared, so -1 +1 -1 = -1 to deck
        1:   51:  printf("Testing that the deck card difference after village is played is 1\n");
        1:   52:  assertTrue(deckCountAfterCard - deckCountBeforeCard == 1);
        -:   53:
        1:   54:  printf("all tests passed\n");
        1:   55:  return 0;
        -:   56:}
File 'cardtest4.c'
Lines executed:96.55% of 29
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:
function assertTrue called 3 returned 100% blocks executed 80%
        -:   10:void assertTrue(int statement) {
        3:   11:    if (statement == 1) {
branch  0 taken 100%
branch  1 taken 0%
        3:   12:        printf("Test passed\n");
        3:   13:    } else {
    #####:   14:        printf("Test failed\n");
        -:   15:    }
        3:   16:}
        -:   17:
        -:   18:
function main called 1 returned 100% blocks executed 100%
        -:   19:int main() {
        -:   20:
        1:   21:  printf("~~testing greatHall card~~\n");
        1:   22:  int testsPassed, testsFailed = 0;
        -:   23:  struct gameState gs;
        1:   24:  int numPlayers = 2;
        1:   25:  int seed = 100;
        1:   26:  int handPos = 0;
        1:   27:  int bonus = 0;
        1:   28:  int choice1, choice2, choice3 = 0;
        1:   29:  int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, great_hall, smithy, council_room};
        -:   30:
        1:   31:  initializeGame(numPlayers, k, seed, &gs);
        -:   32:
        -:   33:  // what does greatHall do?
        -:   34:  // draw card - +1
        -:   35:  // action inc by 1
        -:   36:  // discard
        -:   37:
        1:   38:  int handCountBeforeCard = numHandCards(&gs);
        1:   39:  int deckCountBeforeCard = gs.deckCount[0];
        1:   40:  int actionsBefore = gs.numActions;
        1:   41:  int result = cardEffect(great_hall, choice1, choice2, choice3, &gs, handPos, &bonus);
        1:   42:  int handCountAfterCard = numHandCards(&gs);
        1:   43:  int actionsAfter = gs.numActions;
        1:   44:  int deckCountAfterCard = gs.deckCount[0];
        -:   45:
        1:   46:  printf("Testing that there is a net gain of 0 cards\n");
        1:   47:  assertTrue(handCountBeforeCard == handCountAfterCard);
        1:   48:  printf("Testing that actions have increased by 1\n");
        1:   49:  assertTrue(actionsAfter - actionsBefore == 1);
        -:   50:  // great_hall card gets played, card also discared, so -1 +1 -1 = -1 to deck
        1:   51:  printf("Testing that the deck card difference after great_hall is played is -1\n");
        1:   52:  assertTrue(deckCountAfterCard - deckCountBeforeCard == -1);
        -:   53:
        1:   54:  printf("all tests passed\n");
        1:   55:  return 0;
        -:   56:}
File 'dominion.c'
Lines executed:27.98% of 647
Branches executed:33.81% of 417
Taken at least once:21.10% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 140 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      140:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      140:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       50:   12:    return -1;
       90:   13:  return 0;
      140:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 89%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
        7:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       14:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 29%
branch  3 taken 71%
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
      950:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      500:   65:        }
       50:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        5:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        5:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       99:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 98%
branch  1 taken 2%
branch  2 taken 0%
branch  3 taken 100%
        -:  114:		{
        1:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        1:  116:		    state->supplyCount[i] = 8; 
        1:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        1:  119:		}
        -:  120:	      else
        -:  121:		{
       49:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      725:  130:	}
        -:  131:
      100:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       80:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
       30:  145:	}
      160:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
       70:  150:	}
       10:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       10:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       10:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
      135:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       25:  193:    drawCard(state->whoseTurn, state);
       25:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:  return 0;
        7:  199:}
        -:  200:
function shuffle called 10 returned 100% blocks executed 93%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  210:    return -1;
       10:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      220:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      100:  215:    card = floor(Random() * state->deckCount[player]);
      100:  216:    newDeck[newDeckPos] = state->deck[player][card];
      100:  217:    newDeckPos++;
      720:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28%
      260:  219:      state->deck[player][i] = state->deck[player][i+1];
      260:  220:    }
      100:  221:    state->deckCount[player]--;
        -:  222:  }
      220:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      100:  224:    state->deck[player][i] = newDeck[i];
      100:  225:    state->deckCount[player]++;
      100:  226:  }
        -:  227:
       10:  228:  return 0;
       10:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 8 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
        8:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 10000 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
    10000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 14 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       14:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 50000 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    50000:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 20%
branch  1 taken 80%
        -:  396:    {
    10000:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    40000:  401:  j = 0;
  2080000:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
  1000000:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  405:	{
    60000:  406:	  j++;
    60000:  407:	}
  1000000:  408:    }
    40000:  409:  if ( j >= 3)
branch  0 taken 25%
branch  1 taken 75%
        -:  410:    {
    10000:  411:      return 1;
        -:  412:    }
        -:  413:
    30000:  414:  return 0;
    50000:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 34 returned 100% blocks executed 41%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       34:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       34:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       34:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       34:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       34:  576:    state->deckCount[player]--;
       34:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       34:  580:  return 0;
       34:  581:}
        -:  582:
function getCost called 14 returned 100% blocks executed 45%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       14:  585:  switch( cardNumber ) 
branch  0 taken 7%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 14%
branch  8 taken 7%
branch  9 taken 7%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 7%
branch 13 taken 7%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 7%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 7%
branch 24 taken 0%
branch 25 taken 7%
branch 26 taken 14%
branch 27 taken 14%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
       14:  644:}
        -:  645:
function card_adventurer called 1 returned 100% blocks executed 66%
        -:  646:int card_adventurer(struct gameState *state, int currentPlayer){
        -:  647:
        -:  648:  int temphand[MAX_HAND];
        1:  649:  int drawntreasure = 0;
        -:  650:  int cardDrawn;
        1:  651:  int z = 0;
        -:  652:
        6:  653:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33%
        -:  654: 
        2:  655:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
        -:  656:     
    #####:  657:      shuffle(currentPlayer, state);
    #####:  658:	}
        -:  659:	
        2:  660:	drawCard(currentPlayer, state);
        -:  661:	
        2:  662:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  663:	
        2:  664:	if (cardDrawn == copper || cardDrawn == gold || cardDrawn == gold){
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  665:	
        2:  666:	  drawntreasure++;
        2:  667:	}
        -:  668:	  
        -:  669:	else{
        -:  670:	
    #####:  671:	  temphand[z]=cardDrawn;
    #####:  672:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  673:	  z++;
        -:  674:    }
        -:  675:  }
        -:  676:  
        2:  677:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100%
        -:  678:  
    #####:  679:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  680:	z=z-1;
        -:  681:  }
        -:  682:      
        1:  683:  return 0;
        -:  684:}
        -:  685:
function card_council_room called 0 returned 0% blocks executed 0%
        -:  686:int card_council_room(struct gameState *state, int currentPlayer, int handPos){
        -:  687:
        -:  688:  int i;
        -:  689:  
        -:  690:  //+4 Cards
    #####:  691:  for (i = 0; i < 4; i++){
branch  0 never executed
branch  1 never executed
        -:  692:
    #####:  693:    drawCard(currentPlayer, state);
    #####:  694:  }
        -:  695:			
        -:  696:  //+1 Buy
    #####:  697:  state->numBuys++;
        -:  698:			
        -:  699:  //Each other player draws a card
    #####:  700:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
        -:  701:  
    #####:  702:    if ( i != currentPlayer ){
branch  0 never executed
branch  1 never executed
        -:  703:
    #####:  704:    }
    #####:  705:	drawCard(i, state);
    #####:  706:  }
        -:  707:			
        -:  708:  //put played card in played card pile
    #####:  709:  discardCard(handPos, currentPlayer, state, 0);
        -:  710:			
    #####:  711:  return 0;
        -:  712:}
        -:  713:
function card_remodel called 0 returned 0% blocks executed 0%
        -:  714:int card_remodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
        -:  715:
        -:  716:  int i;
    #####:  717:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  718:
    #####:  719:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ){
branch  0 never executed
branch  1 never executed
        -:  720:    
    #####:  721:    return -1;
        -:  722:  }
        -:  723:
    #####:  724:  gainCard(choice2, state, 0, currentPlayer);
        -:  725:
        -:  726:  //discard card from hand
    #####:  727:  discardCard(handPos, currentPlayer, state, 0);
        -:  728:
        -:  729:  //discard trashed card
    #####:  730:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
        -:  731:
    #####:  732:    if (state->hand[currentPlayer][i] == j){
branch  0 never executed
branch  1 never executed
        -:  733:
    #####:  734:      discardCard(i, currentPlayer, state, 0);			
    #####:  735:	  break;
        -:  736:	}
    #####:  737:  }
        -:  738:
    #####:  739:  return 0;
    #####:  740:}
        -:  741:
function card_smithy called 1 returned 100% blocks executed 100%
        -:  742:int card_smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  743:
        -:  744:  int i;
        -:  745:
        -:  746:  //+3 Cards
       10:  747:  for (i = 0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20%
        -:  748:
        4:  749:    drawCard(currentPlayer, state);
        4:  750:  }
        -:  751:			
        -:  752:  //discard card from hand
        1:  753:  discardCard(handPos, currentPlayer, state, 0);
        -:  754:  
        1:  755:  return 0;
        -:  756:}
        -:  757:
function card_village called 1 returned 100% blocks executed 100%
        -:  758:int card_village(struct gameState *state, int currentPlayer, int handPos){
        -:  759:
        -:  760:  //+1 Card
        1:  761:  drawCard(currentPlayer, state);
        1:  762:  drawCard(currentPlayer, state);
        -:  763:			
        -:  764:  //+2 Actions
        1:  765:  state->numActions = state->numActions + 1;
        -:  766:			
        -:  767:  //discard played card from hand
        1:  768:  discardCard(handPos, currentPlayer, state, 0);
        -:  769:
        1:  770:  return 0;
        -:  771:}
        -:  772:
function cardEffect called 4 returned 100% blocks executed 3%
        -:  773:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  774:{
        -:  775:  int i;
        -:  776:  int j;
        -:  777:  int k;
        -:  778:  int x;
        -:  779:  int index;
        4:  780:  int currentPlayer = whoseTurn(state);
        4:  781:  int nextPlayer = currentPlayer + 1;
        -:  782:
        4:  783:  int tributeRevealedCards[2] = {-1, -1};
        -:  784:  int temphand[MAX_HAND];// moved above the if statement
        4:  785:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  786:    nextPlayer = 0;
    #####:  787:  }
        -:  788:  
        -:  789:	
        -:  790:  //uses switch to select card and perform actions
        4:  791:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  792:    {
        -:  793:    //TODO Refactored into function and introduced subtle bug.
        -:  794:    case adventurer:
        -:  795:     
        1:  796:      return card_adventurer(state, currentPlayer);
        -:  797:
        -:  798:    //TODO Refactored into function and introduced subtle bug.			
        -:  799:    case council_room:
        -:  800:			
    #####:  801:      return card_council_room(state, currentPlayer, handPos);
        -:  802:			
        -:  803:    case feast:
        -:  804:      //gain card with cost up to 5
        -:  805:      //Backup hand
    #####:  806:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  807:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  808:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  809:      }
        -:  810:      //Backup hand
        -:  811:
        -:  812:      //Update Coins for Buy
    #####:  813:      updateCoins(currentPlayer, state, 5);
    #####:  814:      x = 1;//Condition to loop on
    #####:  815:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  816:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  817:	  if (DEBUG)
        -:  818:	    printf("None of that card left, sorry!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  822:	  }
    #####:  823:	}
    #####:  824:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  825:	  printf("That card is too expensive!\n");
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  829:	  }
    #####:  830:	}
        -:  831:	else{
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
    #####:  837:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  838:	  x = 0;//No more buying cards
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  842:	  }
        -:  843:
        -:  844:	}
        -:  845:      }     
        -:  846:
        -:  847:      //Reset Hand
    #####:  848:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  849:	state->hand[currentPlayer][i] = temphand[i];
    #####:  850:	temphand[i] = -1;
    #####:  851:      }
        -:  852:      //Reset Hand
        -:  853:      			
    #####:  854:      return 0;
        -:  855:			
        -:  856:    case gardens:
    #####:  857:      return -1;
        -:  858:			
        -:  859:    case mine:
    #####:  860:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  861:
    #####:  862:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  863:	{
    #####:  864:	  return -1;
        -:  865:	}
        -:  866:		
    #####:  867:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:
    #####:  877:      gainCard(choice2, state, 2, currentPlayer);
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  884:	{
    #####:  885:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      discardCard(i, currentPlayer, state, 0);			
    #####:  888:	      break;
        -:  889:	    }
    #####:  890:	}
        -:  891:			
    #####:  892:      return 0;
        -:  893:
        -:  894:    //TODO Refactored into function but DID NOT introduce subtle bug.			
        -:  895:    case remodel:
        -:  896:
    #####:  897:      return card_remodel(state, currentPlayer, choice1, choice2, handPos);
        -:  898:      
        -:  899:    //TODO Refactored into function and introduced subtle bug.		
        -:  900:    case smithy:
        -:  901:
        1:  902:      return card_smithy(state, currentPlayer, handPos);
        -:  903:      
        -:  904:    //TODO Refactored into function and introduced subtle bug.		
        -:  905:    case village:
        -:  906:
        1:  907:      return card_village(state, currentPlayer, handPos);
        -:  908:		
        -:  909:    case baron:
    #####:  910:      state->numBuys++;//Increase buys by 1!
    #####:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
    #####:  948:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  950:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  951:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
    #####:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
    #####:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
        -:  961:      //+1 Card
        1:  962:      drawCard(currentPlayer, state);
        -:  963:			
        -:  964:      //+1 Actions
        1:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
        1:  968:      discardCard(handPos, currentPlayer, state, 0);
        1:  969:      return 0;
        -:  970:		
        -:  971:    case minion:
        -:  972:      //+1 action
    #####:  973:      state->numActions++;
        -:  974:			
        -:  975:      //discard card from hand
    #####:  976:      discardCard(handPos, currentPlayer, state, 0);
        -:  977:			
    #####:  978:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  state->coins = state->coins + 2;
    #####:  981:	}
        -:  982:			
    #####:  983:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  984:	{
        -:  985:	  //discard hand
    #####:  986:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  987:	    {
    #####:  988:	      discardCard(handPos, currentPlayer, state, 0);
        -:  989:	    }
        -:  990:				
        -:  991:	  //draw 4
    #####:  992:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      drawCard(currentPlayer, state);
    #####:  995:	    }
        -:  996:				
        -:  997:	  //other players discard hand and redraw if hand size > 4
    #####:  998:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  999:	    {
    #####: 1000:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1001:		{
    #####: 1002:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1003:		    {
        -: 1004:		      //discard hand
    #####: 1005:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1006:			{
    #####: 1007:			  discardCard(handPos, i, state, 0);
        -: 1008:			}
        -: 1009:							
        -: 1010:		      //draw 4
    #####: 1011:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1012:			{
    #####: 1013:			  drawCard(i, state);
    #####: 1014:			}
    #####: 1015:		    }
    #####: 1016:		}
    #####: 1017:	    }
        -: 1018:				
    #####: 1019:	}
    #####: 1020:      return 0;
        -: 1021:		
        -: 1022:    case steward:
    #####: 1023:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1024:	{
        -: 1025:	  //+2 cards
    #####: 1026:	  drawCard(currentPlayer, state);
    #####: 1027:	  drawCard(currentPlayer, state);
    #####: 1028:	}
    #####: 1029:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
        -: 1031:	  //+2 coins
    #####: 1032:	  state->coins = state->coins + 2;
    #####: 1033:	}
        -: 1034:      else
        -: 1035:	{
        -: 1036:	  //trash 2 cards in hand
    #####: 1037:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1038:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1039:	}
        -: 1040:			
        -: 1041:      //discard card from hand
    #####: 1042:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:      return 0;
        -: 1044:		
        -: 1045:    case tribute:
    #####: 1046:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	  state->deckCount[nextPlayer]--;
    #####: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:	  state->discardCount[nextPlayer]--;
    #####: 1054:	}
        -: 1055:	else{
        -: 1056:	  //No Card to Reveal
        -: 1057:	  if (DEBUG){
        -: 1058:	    printf("No cards to reveal\n");
        -: 1059:	  }
        -: 1060:	}
    #####: 1061:      }
        -: 1062:	    
        -: 1063:      else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1066:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:	    state->deckCount[nextPlayer]++;
    #####: 1068:	    state->discard[nextPlayer][i] = -1;
    #####: 1069:	    state->discardCount[nextPlayer]--;
    #####: 1070:	  }
        -: 1071:			    
    #####: 1072:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1073:	} 
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:      }    
        -: 1081:		       
    #####: 1082:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
    #####: 1086:      }
        -: 1087:
    #####: 1088:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1090:	  state->coins += 2;
    #####: 1091:	}
        -: 1092:		    
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1094:	  drawCard(currentPlayer, state);
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:	  state->numActions = state->numActions + 2;
        -: 1099:	}
    #####: 1100:      }
        -: 1101:	    
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case ambassador:
    #####: 1105:      j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
    #####: 1112:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1120:	    {
    #####: 1121:	      j++;
    #####: 1122:	    }
    #####: 1123:	}
    #####: 1124:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
        -: 1129:      if (DEBUG) 
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:      //increase supply count for choosen card by amount being discarded
    #####: 1133:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:			
        -: 1135:      //each other player gains a copy of revealed card
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1141:	    }
    #####: 1142:	}
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1146:
        -: 1147:      //trash copies of cards returned to supply
    #####: 1148:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:		  discardCard(i, currentPlayer, state, 1);
    #####: 1155:		  break;
        -: 1156:		}
    #####: 1157:	    }
    #####: 1158:	}			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case cutpurse:
        -: 1163:
    #####: 1164:      updateCoins(currentPlayer, state, 2);
    #####: 1165:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1166:	{
    #####: 1167:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1168:	    {
    #####: 1169:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1170:		{
    #####: 1171:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1172:		    {
    #####: 1173:		      discardCard(j, i, state, 0);
    #####: 1174:		      break;
        -: 1175:		    }
    #####: 1176:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1177:		    {
    #####: 1178:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1179:			{
        -: 1180:			  if (DEBUG)
        -: 1181:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1182:			}	
    #####: 1183:		      break;
        -: 1184:		    }		
    #####: 1185:		}
        -: 1186:					
    #####: 1187:	    }
        -: 1188:				
    #####: 1189:	}				
        -: 1190:
        -: 1191:      //discard played card from hand
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1193:
    #####: 1194:      return 0;
        -: 1195:
        -: 1196:		
        -: 1197:    case embargo: 
        -: 1198:      //+2 Coins
    #####: 1199:      state->coins = state->coins + 2;
        -: 1200:			
        -: 1201:      //see if selected pile is in play
    #####: 1202:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1203:	{
    #####: 1204:	  return -1;
        -: 1205:	}
        -: 1206:			
        -: 1207:      //add embargo token to selected supply pile
    #####: 1208:      state->embargoTokens[choice1]++;
        -: 1209:			
        -: 1210:      //trash card
    #####: 1211:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1212:      return 0;
        -: 1213:		
        -: 1214:    case outpost:
        -: 1215:      //set outpost flag
    #####: 1216:      state->outpostPlayed++;
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case salvager:
        -: 1223:      //+1 buy
    #####: 1224:      state->numBuys++;
        -: 1225:			
    #####: 1226:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1227:	{
        -: 1228:	  //gain coins equal to trashed card
    #####: 1229:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1230:	  //trash card
    #####: 1231:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1232:	}
        -: 1233:			
        -: 1234:      //discard card
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1236:      return 0;
        -: 1237:		
        -: 1238:    case sea_hag:
    #####: 1239:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1240:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1241:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1242:	  state->discardCount[i]++;
    #####: 1243:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1244:	}
    #####: 1245:      }
    #####: 1246:      return 0;
        -: 1247:		
        -: 1248:    case treasure_map:
        -: 1249:      //search hand for another treasure_map
    #####: 1250:      index = -1;
    #####: 1251:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1252:	{
    #####: 1253:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1254:	    {
    #####: 1255:	      index = i;
    #####: 1256:	      break;
        -: 1257:	    }
    #####: 1258:	}
    #####: 1259:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1260:	{
        -: 1261:	  //trash both treasure cards
    #####: 1262:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1263:	  discardCard(index, currentPlayer, state, 1);
        -: 1264:
        -: 1265:	  //gain 4 Gold cards
    #####: 1266:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1267:	    {
    #####: 1268:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1269:	    }
        -: 1270:				
        -: 1271:	  //return success
    #####: 1272:	  return 1;
        -: 1273:	}
        -: 1274:			
        -: 1275:      //no second treasure_map found in hand
    #####: 1276:      return -1;
        -: 1277:    }
        -: 1278:	
    #####: 1279:  return -1;
        4: 1280:}
        -: 1281:
function discardCard called 3 returned 100% blocks executed 80%
        -: 1282:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1283:{
        -: 1284:	
        -: 1285:  //if card is not trashed, added to Played pile 
        3: 1286:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1287:    {
        -: 1288:      //add card to played pile
        3: 1289:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1290:      state->playedCardCount++;
        3: 1291:    }
        -: 1292:	
        -: 1293:  //set played card to -1
        3: 1294:  state->hand[currentPlayer][handPos] = -1;
        -: 1295:	
        -: 1296:  //remove card from player's hand
        3: 1297:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1298:    {
        -: 1299:      //reduce number of cards in hand
    #####: 1300:      state->handCount[currentPlayer]--;
    #####: 1301:    }
        3: 1302:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1303:    {
        -: 1304:      //reduce number of cards in hand
    #####: 1305:      state->handCount[currentPlayer]--;
    #####: 1306:    }
        -: 1307:  else 	
        -: 1308:    {
        -: 1309:      //replace discarded card with last card in hand
        3: 1310:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1311:      //set last card to -1
        3: 1312:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1313:      //reduce number of cards in hand
        3: 1314:      state->handCount[currentPlayer]--;
        -: 1315:    }
        -: 1316:	
        3: 1317:  return 0;
        -: 1318:}
        -: 1319:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1320:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1321:{
        -: 1322:  //Note: supplyPos is enum of choosen card
        -: 1323:	
        -: 1324:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1325:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1326:    {
    #####: 1327:      return -1;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //added card for [whoseTurn] current player:
        -: 1331:  // toFlag = 0 : add to discard
        -: 1332:  // toFlag = 1 : add to deck
        -: 1333:  // toFlag = 2 : add to hand
        -: 1334:
    #####: 1335:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1336:    {
    #####: 1337:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1338:      state->deckCount[player]++;
    #####: 1339:    }
    #####: 1340:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1341:    {
    #####: 1342:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1343:      state->handCount[player]++;
    #####: 1344:    }
        -: 1345:  else
        -: 1346:    {
    #####: 1347:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1348:      state->discardCount[player]++;
        -: 1349:    }
        -: 1350:	
        -: 1351:  //decrease number in supply pile
    #####: 1352:  state->supplyCount[supplyPos]--;
        -: 1353:	 
    #####: 1354:  return 0;
    #####: 1355:}
        -: 1356:
function updateCoins called 5 returned 100% blocks executed 85%
        -: 1357:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1358:{
        -: 1359:  int i;
        -: 1360:	
        -: 1361:  //reset coin count
        5: 1362:  state->coins = 0;
        -: 1363:
        -: 1364:  //add coins for each Treasure card in player's hand
       60: 1365:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1366:    {
       25: 1367:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1368:	{
       20: 1369:	  state->coins += 1;
       20: 1370:	}
        5: 1371:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1372:	{
    #####: 1373:	  state->coins += 2;
    #####: 1374:	}
        5: 1375:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1376:	{
    #####: 1377:	  state->coins += 3;
    #####: 1378:	}	
       25: 1379:    }	
        -: 1380:
        -: 1381:  //add bonus
        5: 1382:  state->coins += bonus;
        -: 1383:
        5: 1384:  return 0;
        -: 1385:}
        -: 1386:
        -: 1387:
        -: 1388://end of dominion.c
        -: 1389:
